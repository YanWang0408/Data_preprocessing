#Date
=====
DD	Day number (01 - 31)
FMDay	Full day name (Monday, Tuesday, etc.)
FMMonth	Full month name (January, February, etc.)
YYYY	Full 4-digit year (2018, 2019, etc.)
=====
SELECT DISTINCT order_date, TO_CHAR(order_date, 'FMDay DD, FMMonth YYYY') AS format_order_date
FROM orders
ORDER BY order_date ASC
LIMIT 3;

# Rank
with user_count_orders as (SELECT  user_id, COUNT(DISTINCT order_id) AS count_orders
  FROM orders
  WHERE DATE_TRUNC('month', order_date) = '2018-08-01'
  GROUP BY user_id)

SELECT user_id, RANK() OVER (ORDER BY count_orders desc) AS count_orders_rank
FROM user_count_orders
ORDER BY count_orders_rank ASC
LIMIT 3;


# Pivot
CREATE EXTENSION IF NOT EXISTS tablefunc;
SELECT * FROM CROSSTAB($$
  SELECT
    user_id,
    DATE_TRUNC('month', order_date) :: DATE AS delivr_month,
    SUM(meal_price * order_quantity) :: FLOAT AS revenue
  FROM meals
  JOIN orders ON meals.meal_id = orders.meal_id
 WHERE user_id IN (0, 1, 2, 3, 4)
   AND order_date < '2018-09-01'
 GROUP BY user_id, delivr_month
 ORDER BY user_id, delivr_month;
$$)

AS ct (user_id INT,
       "2018-06-01" FLOAT,
       "2018-07-01" FLOAT,
       "2018-08-01" FLOAT)
ORDER BY user_id ASC;

# Report
CREATE EXTENSION IF NOT EXISTS tablefunc;
SELECT * FROM CROSSTAB($$
  WITH eatery_users AS  (
    SELECT eatery,  TO_CHAR(order_date, '"Q"Q YYYY') AS delivr_quarter, COUNT(DISTINCT user_id) AS users
    FROM meals
    JOIN orders ON meals.meal_id = orders.meal_id
    GROUP BY eatery, delivr_quarter
    ORDER BY delivr_quarter, users)
  SELECT eatery, delivr_quarter, 
                    RANK() OVER (PARTITION BY delivr_quarter ORDER BY users DESC) :: INT AS users_rank
  FROM eatery_users
  ORDER BY eatery, delivr_quarter;
$$)

AS  ct (eatery TEXT,
        "Q2 2018" INT,
        "Q3 2018" INT,
        "Q4 2018" INT)
ORDER BY "Q4 2018";